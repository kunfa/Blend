// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// BV_SI
Rcpp::List BV_SI(arma::vec y, arma::mat e, arma::mat g, arma:: mat w, arma::mat C, unsigned int s, unsigned int q, int maxSteps, arma::vec hatM, arma::vec hatR0, arma::vec hatRStar, arma::vec hatata, arma::vec hatInvSigM0, arma::vec hatInvTauSq0, arma::vec hatInvTauSqStar, double hatInvTauSq1, double hatInvTauSq2, double hatPi, double hatPi1, double hatLambdaSq0, double hatLambdaSqStar, double hatLambdaSq1, double hatLambdaSq2, double hatSigmaSq, double a0, double b0, double aStar, double bStar, double a1, double b1, double a2, double b2, double alpha, double gamma, double mu1, double mu2, double nu1, double nu2, int progress);
RcppExport SEXP _Blend_BV_SI(SEXP ySEXP, SEXP eSEXP, SEXP gSEXP, SEXP wSEXP, SEXP CSEXP, SEXP sSEXP, SEXP qSEXP, SEXP maxStepsSEXP, SEXP hatMSEXP, SEXP hatR0SEXP, SEXP hatRStarSEXP, SEXP hatataSEXP, SEXP hatInvSigM0SEXP, SEXP hatInvTauSq0SEXP, SEXP hatInvTauSqStarSEXP, SEXP hatInvTauSq1SEXP, SEXP hatInvTauSq2SEXP, SEXP hatPiSEXP, SEXP hatPi1SEXP, SEXP hatLambdaSq0SEXP, SEXP hatLambdaSqStarSEXP, SEXP hatLambdaSq1SEXP, SEXP hatLambdaSq2SEXP, SEXP hatSigmaSqSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP aStarSEXP, SEXP bStarSEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP nu1SEXP, SEXP nu2SEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type s(sSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type maxSteps(maxStepsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatM(hatMSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatR0(hatR0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatRStar(hatRStarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatata(hatataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatInvSigM0(hatInvSigM0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatInvTauSq0(hatInvTauSq0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatInvTauSqStar(hatInvTauSqStarSEXP);
    Rcpp::traits::input_parameter< double >::type hatInvTauSq1(hatInvTauSq1SEXP);
    Rcpp::traits::input_parameter< double >::type hatInvTauSq2(hatInvTauSq2SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi(hatPiSEXP);
    Rcpp::traits::input_parameter< double >::type hatPi1(hatPi1SEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSq0(hatLambdaSq0SEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSqStar(hatLambdaSqStarSEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSq1(hatLambdaSq1SEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSq2(hatLambdaSq2SEXP);
    Rcpp::traits::input_parameter< double >::type hatSigmaSq(hatSigmaSqSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type aStar(aStarSEXP);
    Rcpp::traits::input_parameter< double >::type bStar(bStarSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type nu1(nu1SEXP);
    Rcpp::traits::input_parameter< double >::type nu2(nu2SEXP);
    Rcpp::traits::input_parameter< int >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(BV_SI(y, e, g, w, C, s, q, maxSteps, hatM, hatR0, hatRStar, hatata, hatInvSigM0, hatInvTauSq0, hatInvTauSqStar, hatInvTauSq1, hatInvTauSq2, hatPi, hatPi1, hatLambdaSq0, hatLambdaSqStar, hatLambdaSq1, hatLambdaSq2, hatSigmaSq, a0, b0, aStar, bStar, a1, b1, a2, b2, alpha, gamma, mu1, mu2, nu1, nu2, progress));
    return rcpp_result_gen;
END_RCPP
}
// BV
Rcpp::List BV(arma::mat xx, arma::vec y, arma::mat W, arma::mat C, unsigned int s, unsigned int q, int maxSteps, arma::vec hatBeta, arma::vec hatAlpha, arma::vec hatata, arma::vec hatInvTauSq, double hatInvTauSq1, double hatInvTauSq2, arma::mat invSigAlpha0, double hatPi, double hatPi1, double hatLambdaSqStar, double hatLambdaSq1, double hatLambdaSq2, double hatSigmaSq, double aStar, double bStar, double a1, double b1, double a2, double b2, double alpha, double gamma, double mu1, double mu2, double nu1, double nu2, int progress);
RcppExport SEXP _Blend_BV(SEXP xxSEXP, SEXP ySEXP, SEXP WSEXP, SEXP CSEXP, SEXP sSEXP, SEXP qSEXP, SEXP maxStepsSEXP, SEXP hatBetaSEXP, SEXP hatAlphaSEXP, SEXP hatataSEXP, SEXP hatInvTauSqSEXP, SEXP hatInvTauSq1SEXP, SEXP hatInvTauSq2SEXP, SEXP invSigAlpha0SEXP, SEXP hatPiSEXP, SEXP hatPi1SEXP, SEXP hatLambdaSqStarSEXP, SEXP hatLambdaSq1SEXP, SEXP hatLambdaSq2SEXP, SEXP hatSigmaSqSEXP, SEXP aStarSEXP, SEXP bStarSEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP nu1SEXP, SEXP nu2SEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type s(sSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type maxSteps(maxStepsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatBeta(hatBetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatAlpha(hatAlphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatata(hatataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatInvTauSq(hatInvTauSqSEXP);
    Rcpp::traits::input_parameter< double >::type hatInvTauSq1(hatInvTauSq1SEXP);
    Rcpp::traits::input_parameter< double >::type hatInvTauSq2(hatInvTauSq2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invSigAlpha0(invSigAlpha0SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi(hatPiSEXP);
    Rcpp::traits::input_parameter< double >::type hatPi1(hatPi1SEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSqStar(hatLambdaSqStarSEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSq1(hatLambdaSq1SEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSq2(hatLambdaSq2SEXP);
    Rcpp::traits::input_parameter< double >::type hatSigmaSq(hatSigmaSqSEXP);
    Rcpp::traits::input_parameter< double >::type aStar(aStarSEXP);
    Rcpp::traits::input_parameter< double >::type bStar(bStarSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type nu1(nu1SEXP);
    Rcpp::traits::input_parameter< double >::type nu2(nu2SEXP);
    Rcpp::traits::input_parameter< int >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(BV(xx, y, W, C, s, q, maxSteps, hatBeta, hatAlpha, hatata, hatInvTauSq, hatInvTauSq1, hatInvTauSq2, invSigAlpha0, hatPi, hatPi1, hatLambdaSqStar, hatLambdaSq1, hatLambdaSq2, hatSigmaSq, aStar, bStar, a1, b1, a2, b2, alpha, gamma, mu1, mu2, nu1, nu2, progress));
    return rcpp_result_gen;
END_RCPP
}
// BVSS_SI
Rcpp::List BVSS_SI(arma::vec y, arma::mat e, arma::mat g, arma:: mat w, arma:: mat C, unsigned int s, unsigned int q, int maxSteps, arma::vec hatM, arma::vec hatR0, arma::vec hatata, arma::vec hatRStar, arma::vec hatInvSigM0, arma::vec hatInvTauSq0, arma::vec hatInvTauSqStar, double hatInvTauSq1, double hatInvTauSq2, double hatPi0, double hatPiStar, double hatPi, double hatPi1, double hatLambdaSq0, double hatLambdaSqStar, double hatLambdaSq1, double hatLambdaSq2, double hatSigmaSq, double a0, double b0, double aStar, double bStar, double a1, double b1, double a2, double b2, double alpha, double gamma, double mu0, double muStar, double mu1, double mu2, double nu0, double nuStar, double nu1, double nu2, int progress);
RcppExport SEXP _Blend_BVSS_SI(SEXP ySEXP, SEXP eSEXP, SEXP gSEXP, SEXP wSEXP, SEXP CSEXP, SEXP sSEXP, SEXP qSEXP, SEXP maxStepsSEXP, SEXP hatMSEXP, SEXP hatR0SEXP, SEXP hatataSEXP, SEXP hatRStarSEXP, SEXP hatInvSigM0SEXP, SEXP hatInvTauSq0SEXP, SEXP hatInvTauSqStarSEXP, SEXP hatInvTauSq1SEXP, SEXP hatInvTauSq2SEXP, SEXP hatPi0SEXP, SEXP hatPiStarSEXP, SEXP hatPiSEXP, SEXP hatPi1SEXP, SEXP hatLambdaSq0SEXP, SEXP hatLambdaSqStarSEXP, SEXP hatLambdaSq1SEXP, SEXP hatLambdaSq2SEXP, SEXP hatSigmaSqSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP aStarSEXP, SEXP bStarSEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP mu0SEXP, SEXP muStarSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP nu0SEXP, SEXP nuStarSEXP, SEXP nu1SEXP, SEXP nu2SEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type s(sSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type maxSteps(maxStepsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatM(hatMSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatR0(hatR0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatata(hatataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatRStar(hatRStarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatInvSigM0(hatInvSigM0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatInvTauSq0(hatInvTauSq0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatInvTauSqStar(hatInvTauSqStarSEXP);
    Rcpp::traits::input_parameter< double >::type hatInvTauSq1(hatInvTauSq1SEXP);
    Rcpp::traits::input_parameter< double >::type hatInvTauSq2(hatInvTauSq2SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi0(hatPi0SEXP);
    Rcpp::traits::input_parameter< double >::type hatPiStar(hatPiStarSEXP);
    Rcpp::traits::input_parameter< double >::type hatPi(hatPiSEXP);
    Rcpp::traits::input_parameter< double >::type hatPi1(hatPi1SEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSq0(hatLambdaSq0SEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSqStar(hatLambdaSqStarSEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSq1(hatLambdaSq1SEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSq2(hatLambdaSq2SEXP);
    Rcpp::traits::input_parameter< double >::type hatSigmaSq(hatSigmaSqSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type aStar(aStarSEXP);
    Rcpp::traits::input_parameter< double >::type bStar(bStarSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type muStar(muStarSEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< double >::type nuStar(nuStarSEXP);
    Rcpp::traits::input_parameter< double >::type nu1(nu1SEXP);
    Rcpp::traits::input_parameter< double >::type nu2(nu2SEXP);
    Rcpp::traits::input_parameter< int >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(BVSS_SI(y, e, g, w, C, s, q, maxSteps, hatM, hatR0, hatata, hatRStar, hatInvSigM0, hatInvTauSq0, hatInvTauSqStar, hatInvTauSq1, hatInvTauSq2, hatPi0, hatPiStar, hatPi, hatPi1, hatLambdaSq0, hatLambdaSqStar, hatLambdaSq1, hatLambdaSq2, hatSigmaSq, a0, b0, aStar, bStar, a1, b1, a2, b2, alpha, gamma, mu0, muStar, mu1, mu2, nu0, nuStar, nu1, nu2, progress));
    return rcpp_result_gen;
END_RCPP
}
// BVSS
Rcpp::List BVSS(arma::vec y, arma::mat W, arma::mat xx, arma::mat C, unsigned int s, unsigned int q, int maxSteps, arma::vec hatAlpha, arma::vec hatBeta, arma::vec hatata, arma::vec hatInvTauSqStar, double hatInvTauSq1, double hatInvTauSq2, arma::mat invSigAlpha0, double hatPiStar, double hatPi, double hatPi1, double hatLambdaSqStar, double hatLambdaSq1, double hatLambdaSq2, double hatSigmaSq, double aStar, double bStar, double a1, double b1, double a2, double b2, double alpha, double gamma, double sh1, double sh0, double mu1, double nu1, double mu2, double nu2, int progress);
RcppExport SEXP _Blend_BVSS(SEXP ySEXP, SEXP WSEXP, SEXP xxSEXP, SEXP CSEXP, SEXP sSEXP, SEXP qSEXP, SEXP maxStepsSEXP, SEXP hatAlphaSEXP, SEXP hatBetaSEXP, SEXP hatataSEXP, SEXP hatInvTauSqStarSEXP, SEXP hatInvTauSq1SEXP, SEXP hatInvTauSq2SEXP, SEXP invSigAlpha0SEXP, SEXP hatPiStarSEXP, SEXP hatPiSEXP, SEXP hatPi1SEXP, SEXP hatLambdaSqStarSEXP, SEXP hatLambdaSq1SEXP, SEXP hatLambdaSq2SEXP, SEXP hatSigmaSqSEXP, SEXP aStarSEXP, SEXP bStarSEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP sh1SEXP, SEXP sh0SEXP, SEXP mu1SEXP, SEXP nu1SEXP, SEXP mu2SEXP, SEXP nu2SEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type s(sSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type maxSteps(maxStepsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatAlpha(hatAlphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatBeta(hatBetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatata(hatataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatInvTauSqStar(hatInvTauSqStarSEXP);
    Rcpp::traits::input_parameter< double >::type hatInvTauSq1(hatInvTauSq1SEXP);
    Rcpp::traits::input_parameter< double >::type hatInvTauSq2(hatInvTauSq2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invSigAlpha0(invSigAlpha0SEXP);
    Rcpp::traits::input_parameter< double >::type hatPiStar(hatPiStarSEXP);
    Rcpp::traits::input_parameter< double >::type hatPi(hatPiSEXP);
    Rcpp::traits::input_parameter< double >::type hatPi1(hatPi1SEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSqStar(hatLambdaSqStarSEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSq1(hatLambdaSq1SEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSq2(hatLambdaSq2SEXP);
    Rcpp::traits::input_parameter< double >::type hatSigmaSq(hatSigmaSqSEXP);
    Rcpp::traits::input_parameter< double >::type aStar(aStarSEXP);
    Rcpp::traits::input_parameter< double >::type bStar(bStarSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type sh1(sh1SEXP);
    Rcpp::traits::input_parameter< double >::type sh0(sh0SEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type nu1(nu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type nu2(nu2SEXP);
    Rcpp::traits::input_parameter< int >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(BVSS(y, W, xx, C, s, q, maxSteps, hatAlpha, hatBeta, hatata, hatInvTauSqStar, hatInvTauSq1, hatInvTauSq2, invSigAlpha0, hatPiStar, hatPi, hatPi1, hatLambdaSqStar, hatLambdaSq1, hatLambdaSq2, hatSigmaSq, aStar, bStar, a1, b1, a2, b2, alpha, gamma, sh1, sh0, mu1, nu1, mu2, nu2, progress));
    return rcpp_result_gen;
END_RCPP
}
// RBV_SI
Rcpp::List RBV_SI(arma::vec y, arma::mat e, arma::mat g, arma:: mat w, arma:: mat C, int maxSteps, int q, arma::vec hatBeta, arma:: mat hatEta, arma::vec hatAlpha, arma::vec hatata, double hatTau, arma::vec hatV, arma::vec hatSg1, arma::vec hatSg2, double hatSg3, double hatSg4, arma::mat invSigAlpha0, double hatPi3, double hatPi4, double hatEtaSq1, double hatEtaSq2, double hatEtaSq3, double hatEtaSq4, double xi1, double xi2, double r1, double r2, double r3, double r4, double a, double b, double sh1, double sh0, int progress);
RcppExport SEXP _Blend_RBV_SI(SEXP ySEXP, SEXP eSEXP, SEXP gSEXP, SEXP wSEXP, SEXP CSEXP, SEXP maxStepsSEXP, SEXP qSEXP, SEXP hatBetaSEXP, SEXP hatEtaSEXP, SEXP hatAlphaSEXP, SEXP hatataSEXP, SEXP hatTauSEXP, SEXP hatVSEXP, SEXP hatSg1SEXP, SEXP hatSg2SEXP, SEXP hatSg3SEXP, SEXP hatSg4SEXP, SEXP invSigAlpha0SEXP, SEXP hatPi3SEXP, SEXP hatPi4SEXP, SEXP hatEtaSq1SEXP, SEXP hatEtaSq2SEXP, SEXP hatEtaSq3SEXP, SEXP hatEtaSq4SEXP, SEXP xi1SEXP, SEXP xi2SEXP, SEXP r1SEXP, SEXP r2SEXP, SEXP r3SEXP, SEXP r4SEXP, SEXP aSEXP, SEXP bSEXP, SEXP sh1SEXP, SEXP sh0SEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type maxSteps(maxStepsSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatBeta(hatBetaSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type hatEta(hatEtaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatAlpha(hatAlphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatata(hatataSEXP);
    Rcpp::traits::input_parameter< double >::type hatTau(hatTauSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatV(hatVSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatSg1(hatSg1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatSg2(hatSg2SEXP);
    Rcpp::traits::input_parameter< double >::type hatSg3(hatSg3SEXP);
    Rcpp::traits::input_parameter< double >::type hatSg4(hatSg4SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invSigAlpha0(invSigAlpha0SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi3(hatPi3SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi4(hatPi4SEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq1(hatEtaSq1SEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq2(hatEtaSq2SEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq3(hatEtaSq3SEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq4(hatEtaSq4SEXP);
    Rcpp::traits::input_parameter< double >::type xi1(xi1SEXP);
    Rcpp::traits::input_parameter< double >::type xi2(xi2SEXP);
    Rcpp::traits::input_parameter< double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< double >::type r3(r3SEXP);
    Rcpp::traits::input_parameter< double >::type r4(r4SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type sh1(sh1SEXP);
    Rcpp::traits::input_parameter< double >::type sh0(sh0SEXP);
    Rcpp::traits::input_parameter< int >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(RBV_SI(y, e, g, w, C, maxSteps, q, hatBeta, hatEta, hatAlpha, hatata, hatTau, hatV, hatSg1, hatSg2, hatSg3, hatSg4, invSigAlpha0, hatPi3, hatPi4, hatEtaSq1, hatEtaSq2, hatEtaSq3, hatEtaSq4, xi1, xi2, r1, r2, r3, r4, a, b, sh1, sh0, progress));
    return rcpp_result_gen;
END_RCPP
}
// RBV
Rcpp::List RBV(arma::mat xx, arma::vec y, arma::mat W, arma::mat C, unsigned int s, unsigned int q, int maxSteps, arma::vec hatAlpha, arma::mat hatBeta, arma::vec hatata, double hatTau, arma::vec hatV, arma::vec hatSg, double hatSg3, double hatSg4, arma::mat invSigAlpha0, double hatPi3, double hatPi4, double hatEtaSq, double hatEtaSq3, double hatEtaSq4, double xi1, double xi2, double r, double r3, double r4, double a, double b, double sh1, double sh0, int progress);
RcppExport SEXP _Blend_RBV(SEXP xxSEXP, SEXP ySEXP, SEXP WSEXP, SEXP CSEXP, SEXP sSEXP, SEXP qSEXP, SEXP maxStepsSEXP, SEXP hatAlphaSEXP, SEXP hatBetaSEXP, SEXP hatataSEXP, SEXP hatTauSEXP, SEXP hatVSEXP, SEXP hatSgSEXP, SEXP hatSg3SEXP, SEXP hatSg4SEXP, SEXP invSigAlpha0SEXP, SEXP hatPi3SEXP, SEXP hatPi4SEXP, SEXP hatEtaSqSEXP, SEXP hatEtaSq3SEXP, SEXP hatEtaSq4SEXP, SEXP xi1SEXP, SEXP xi2SEXP, SEXP rSEXP, SEXP r3SEXP, SEXP r4SEXP, SEXP aSEXP, SEXP bSEXP, SEXP sh1SEXP, SEXP sh0SEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type s(sSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type maxSteps(maxStepsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatAlpha(hatAlphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type hatBeta(hatBetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatata(hatataSEXP);
    Rcpp::traits::input_parameter< double >::type hatTau(hatTauSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatV(hatVSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatSg(hatSgSEXP);
    Rcpp::traits::input_parameter< double >::type hatSg3(hatSg3SEXP);
    Rcpp::traits::input_parameter< double >::type hatSg4(hatSg4SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invSigAlpha0(invSigAlpha0SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi3(hatPi3SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi4(hatPi4SEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq(hatEtaSqSEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq3(hatEtaSq3SEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq4(hatEtaSq4SEXP);
    Rcpp::traits::input_parameter< double >::type xi1(xi1SEXP);
    Rcpp::traits::input_parameter< double >::type xi2(xi2SEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type r3(r3SEXP);
    Rcpp::traits::input_parameter< double >::type r4(r4SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type sh1(sh1SEXP);
    Rcpp::traits::input_parameter< double >::type sh0(sh0SEXP);
    Rcpp::traits::input_parameter< int >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(RBV(xx, y, W, C, s, q, maxSteps, hatAlpha, hatBeta, hatata, hatTau, hatV, hatSg, hatSg3, hatSg4, invSigAlpha0, hatPi3, hatPi4, hatEtaSq, hatEtaSq3, hatEtaSq4, xi1, xi2, r, r3, r4, a, b, sh1, sh0, progress));
    return rcpp_result_gen;
END_RCPP
}
// RBVSS_SI
Rcpp::List RBVSS_SI(arma::vec y, arma::mat e, arma::mat g, arma:: mat w, arma:: mat C, int maxSteps, unsigned int q, arma::vec hatBeta, arma:: mat hatEta, arma::vec hatAlpha, arma:: vec hatata, double hatTau, arma::vec hatV, arma::vec hatSg1, arma::vec hatSg2, double hatSg3, double hatSg4, arma::mat invSigAlpha0, double hatPi1, double hatPi2, double hatPi3, double hatPi4, double hatEtaSq1, double hatEtaSq2, double hatEtaSq3, double hatEtaSq4, double xi1, double xi2, double r1, double r2, double r3, double r4, double a, double b, double sh1, double sh0, int progress);
RcppExport SEXP _Blend_RBVSS_SI(SEXP ySEXP, SEXP eSEXP, SEXP gSEXP, SEXP wSEXP, SEXP CSEXP, SEXP maxStepsSEXP, SEXP qSEXP, SEXP hatBetaSEXP, SEXP hatEtaSEXP, SEXP hatAlphaSEXP, SEXP hatataSEXP, SEXP hatTauSEXP, SEXP hatVSEXP, SEXP hatSg1SEXP, SEXP hatSg2SEXP, SEXP hatSg3SEXP, SEXP hatSg4SEXP, SEXP invSigAlpha0SEXP, SEXP hatPi1SEXP, SEXP hatPi2SEXP, SEXP hatPi3SEXP, SEXP hatPi4SEXP, SEXP hatEtaSq1SEXP, SEXP hatEtaSq2SEXP, SEXP hatEtaSq3SEXP, SEXP hatEtaSq4SEXP, SEXP xi1SEXP, SEXP xi2SEXP, SEXP r1SEXP, SEXP r2SEXP, SEXP r3SEXP, SEXP r4SEXP, SEXP aSEXP, SEXP bSEXP, SEXP sh1SEXP, SEXP sh0SEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type maxSteps(maxStepsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatBeta(hatBetaSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type hatEta(hatEtaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatAlpha(hatAlphaSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type hatata(hatataSEXP);
    Rcpp::traits::input_parameter< double >::type hatTau(hatTauSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatV(hatVSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatSg1(hatSg1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatSg2(hatSg2SEXP);
    Rcpp::traits::input_parameter< double >::type hatSg3(hatSg3SEXP);
    Rcpp::traits::input_parameter< double >::type hatSg4(hatSg4SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invSigAlpha0(invSigAlpha0SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi1(hatPi1SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi2(hatPi2SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi3(hatPi3SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi4(hatPi4SEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq1(hatEtaSq1SEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq2(hatEtaSq2SEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq3(hatEtaSq3SEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq4(hatEtaSq4SEXP);
    Rcpp::traits::input_parameter< double >::type xi1(xi1SEXP);
    Rcpp::traits::input_parameter< double >::type xi2(xi2SEXP);
    Rcpp::traits::input_parameter< double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< double >::type r3(r3SEXP);
    Rcpp::traits::input_parameter< double >::type r4(r4SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type sh1(sh1SEXP);
    Rcpp::traits::input_parameter< double >::type sh0(sh0SEXP);
    Rcpp::traits::input_parameter< int >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(RBVSS_SI(y, e, g, w, C, maxSteps, q, hatBeta, hatEta, hatAlpha, hatata, hatTau, hatV, hatSg1, hatSg2, hatSg3, hatSg4, invSigAlpha0, hatPi1, hatPi2, hatPi3, hatPi4, hatEtaSq1, hatEtaSq2, hatEtaSq3, hatEtaSq4, xi1, xi2, r1, r2, r3, r4, a, b, sh1, sh0, progress));
    return rcpp_result_gen;
END_RCPP
}
// RBVSS
Rcpp::List RBVSS(arma::mat xx, arma::vec y, arma::mat W, arma:: mat C, unsigned int s, unsigned int q, int maxSteps, arma::vec hatAlpha, arma::mat hatBeta, arma::vec hatata, double hatTau, arma::vec hatV, arma::vec hatSg, double hatSg3, double hatSg4, arma::mat invSigAlpha0, double hatPi, double hatPi3, double hatPi4, double hatEtaSq, double hatEtaSq3, double hatEtaSq4, double xi1, double xi2, double r, double r3, double r4, double a, double b, double sh1, double sh0, int progress);
RcppExport SEXP _Blend_RBVSS(SEXP xxSEXP, SEXP ySEXP, SEXP WSEXP, SEXP CSEXP, SEXP sSEXP, SEXP qSEXP, SEXP maxStepsSEXP, SEXP hatAlphaSEXP, SEXP hatBetaSEXP, SEXP hatataSEXP, SEXP hatTauSEXP, SEXP hatVSEXP, SEXP hatSgSEXP, SEXP hatSg3SEXP, SEXP hatSg4SEXP, SEXP invSigAlpha0SEXP, SEXP hatPiSEXP, SEXP hatPi3SEXP, SEXP hatPi4SEXP, SEXP hatEtaSqSEXP, SEXP hatEtaSq3SEXP, SEXP hatEtaSq4SEXP, SEXP xi1SEXP, SEXP xi2SEXP, SEXP rSEXP, SEXP r3SEXP, SEXP r4SEXP, SEXP aSEXP, SEXP bSEXP, SEXP sh1SEXP, SEXP sh0SEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type s(sSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type maxSteps(maxStepsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatAlpha(hatAlphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type hatBeta(hatBetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatata(hatataSEXP);
    Rcpp::traits::input_parameter< double >::type hatTau(hatTauSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatV(hatVSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatSg(hatSgSEXP);
    Rcpp::traits::input_parameter< double >::type hatSg3(hatSg3SEXP);
    Rcpp::traits::input_parameter< double >::type hatSg4(hatSg4SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invSigAlpha0(invSigAlpha0SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi(hatPiSEXP);
    Rcpp::traits::input_parameter< double >::type hatPi3(hatPi3SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi4(hatPi4SEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq(hatEtaSqSEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq3(hatEtaSq3SEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq4(hatEtaSq4SEXP);
    Rcpp::traits::input_parameter< double >::type xi1(xi1SEXP);
    Rcpp::traits::input_parameter< double >::type xi2(xi2SEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type r3(r3SEXP);
    Rcpp::traits::input_parameter< double >::type r4(r4SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type sh1(sh1SEXP);
    Rcpp::traits::input_parameter< double >::type sh0(sh0SEXP);
    Rcpp::traits::input_parameter< int >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(RBVSS(xx, y, W, C, s, q, maxSteps, hatAlpha, hatBeta, hatata, hatTau, hatV, hatSg, hatSg3, hatSg4, invSigAlpha0, hatPi, hatPi3, hatPi4, hatEtaSq, hatEtaSq3, hatEtaSq4, xi1, xi2, r, r3, r4, a, b, sh1, sh0, progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Blend_BV_SI", (DL_FUNC) &_Blend_BV_SI, 39},
    {"_Blend_BV", (DL_FUNC) &_Blend_BV, 33},
    {"_Blend_BVSS_SI", (DL_FUNC) &_Blend_BVSS_SI, 45},
    {"_Blend_BVSS", (DL_FUNC) &_Blend_BVSS, 36},
    {"_Blend_RBV_SI", (DL_FUNC) &_Blend_RBV_SI, 35},
    {"_Blend_RBV", (DL_FUNC) &_Blend_RBV, 31},
    {"_Blend_RBVSS_SI", (DL_FUNC) &_Blend_RBVSS_SI, 37},
    {"_Blend_RBVSS", (DL_FUNC) &_Blend_RBVSS, 32},
    {NULL, NULL, 0}
};

RcppExport void R_init_Blend(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
